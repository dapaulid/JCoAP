/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on May 16, 2011, 12:55:25 PM
 */
package example.guiExample;

import coap.DELETERequest;
import coap.GETRequest;
import coap.POSTRequest;
import coap.PUTRequest;
import coap.RemoteResource;
import coap.Request;
import coap.Resource;
import coap.Response;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author dominique
 */
public class MainWindow extends javax.swing.JFrame implements ActionListener, TreeSelectionListener {

    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();
        initButtons();
        initTree();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        uriField = new javax.swing.JTextField();
        getButton = new javax.swing.JButton();
        postButton = new javax.swing.JButton();
        putButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        dataEntryField = new javax.swing.JTextField();
        treePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resourceTree = new javax.swing.JTree();
        contentPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        contentField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        uriField.setText("coap://vs0.inf.ethz.ch:61616/.well-known/core");

        getButton.setText("GET");
        getButton.setActionCommand("GET");

        postButton.setText("POST");

        putButton.setText("PUT");

        deleteButton.setText("DELETE");

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dataEntryField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(uriField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(putButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteButton)
                    .addComponent(postButton))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uriField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getButton)
                    .addComponent(deleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(putButton)
                    .addComponent(postButton)
                    .addComponent(dataEntryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        resourceTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resourceTreeMouseClicked(evt);
            }
        });
        resourceTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                resourceTreeValueChanged(evt);
            }
        });
        resourceTree.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                resourceTreeComponentAdded(evt);
            }
        });
        resourceTree.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
                resourceTreeAncestorMoved(evt);
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
            }
        });
        jScrollPane1.setViewportView(resourceTree);
        resourceTree.getAccessibleContext().setAccessibleName("resourceTree");

        javax.swing.GroupLayout treePanelLayout = new javax.swing.GroupLayout(treePanel);
        treePanel.setLayout(treePanelLayout);
        treePanelLayout.setHorizontalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(322, Short.MAX_VALUE))
        );
        treePanelLayout.setVerticalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        contentField.setColumns(20);
        contentField.setLineWrap(true);
        contentField.setRows(5);
        contentField.setText("payload");
        jScrollPane2.setViewportView(contentField);

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addContainerGap())
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(contentPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(treePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(controlPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(treePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resourceTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resourceTreeMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_resourceTreeMouseClicked

    private void resourceTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_resourceTreeValueChanged
        // TODO add your handling code here:
        StringBuilder uri = new StringBuilder();
        uri.append("coap://");
        StringTokenizer st = new StringTokenizer(evt.getNewLeadSelectionPath().toString(), "[ ,]");
        while (st.hasMoreTokens()) {
            uri.append(st.nextToken());
            uri.append("/");
        }
        uri.deleteCharAt(uri.length() - 1);
        uriField.setText(uri.toString());
    }//GEN-LAST:event_resourceTreeValueChanged

    private void resourceTreeComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_resourceTreeComponentAdded
        // TODO add your handling code here:
        System.err.println("Component Added");
    }//GEN-LAST:event_resourceTreeComponentAdded

    private void resourceTreeAncestorMoved(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_resourceTreeAncestorMoved
        // TODO add your handling code here:
        resourceTree.updateUI();
        this.repaint();
    }//GEN-LAST:event_resourceTreeAncestorMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea contentField;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JTextField dataEntryField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton getButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton postButton;
    private javax.swing.JButton putButton;
    private javax.swing.JTree resourceTree;
    private javax.swing.JPanel treePanel;
    private javax.swing.JTextField uriField;
    // End of variables declaration//GEN-END:variables
    private DefaultMutableTreeNode rootNode;
    //TODO: MUST USE UTF-8
    //private static final String stringEncoding = "UTF-8";
    private static final String stringEncoding = "ISO-8859-1";

    private void initButtons() {
        getButton.addActionListener(this);
        postButton.addActionListener(this);
        putButton.addActionListener(this);
        deleteButton.addActionListener(this);
    }

    private void initTree() {
        rootNode = ((DefaultMutableTreeNode) (resourceTree.getModel().getRoot()));
        rootNode.removeAllChildren();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equalsIgnoreCase("get")) {
            handleGet(e);
        } else if (e.getActionCommand().equalsIgnoreCase("post")) {
            handlePost(e);
        } else if (e.getActionCommand().equalsIgnoreCase("put")) {
            handlePut(e);
        } else if (e.getActionCommand().equalsIgnoreCase("delete")) {
            handleDelete(e);
        } else {
            System.err.println("unknown command");
        }
    }

    public void handleGet(ActionEvent e) {
        String[] uriTokens = uriField.getText().split("/");
        int length = uriTokens.length;
        if (uriTokens[length - 2].equalsIgnoreCase(".well-known") && uriTokens[length - 1].equalsIgnoreCase("core")) {
            System.err.println("Resource Discovery");
            handleResourceDiscovery(e);
        } else {
            Request request = new GETRequest() {

                @Override
                protected void handleResponse(Response response) {
                    contentField.setText(response.getPayloadString());
                }
            };
            request.setURI(uriField.getText());
            try {
                request.execute();
            } catch (Exception ex) {
                // TODO Auto-generated catch block
                ex.printStackTrace();
            }
        }

    }

    public void handleResourceDiscovery(ActionEvent e) {
        Request request = new GETRequest() {

            @Override
            protected void handleResponse(Response response) {
                Resource root;
                try {
                    root = RemoteResource.newRoot(new String(response.getPayload(), stringEncoding));
                    populateTree(root, rootNode);
                    contentField.setText("Resource Discovery");
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        };
        request.setURI(uriField.getText());
        String uri = uriField.getText();
        System.err.println(getHost(uri));
        rootNode.removeAllChildren();
        rootNode.setUserObject(getHost(uri));
        resourceTree.updateUI();
        try {
            request.execute();
            expandAll();
        } catch (Exception ex) {
            // TODO Auto-generated catch block
            ex.printStackTrace();
        }
    }

    public void handlePost(ActionEvent e) {
        Request request = new POSTRequest() {

            @Override
            protected void handleResponse(Response response) {
                contentField.setText(response.getPayloadString());
            }
        };
        request.setPayload(dataEntryField.getText());
        request.setURI(uriField.getText());
        try {
            request.execute();
        } catch (Exception ex) {
            // TODO Auto-generated catch block
            ex.printStackTrace();
        }
    }

    public void handlePut(ActionEvent e) {
        Request request = new PUTRequest() {

            @Override
            protected void handleResponse(Response response) {
                contentField.setText(response.getPayloadString());
            }
        };
        request.setPayload(dataEntryField.getText());
        request.setURI(uriField.getText());
        try {
            request.execute();
        } catch (Exception ex) {
            // TODO Auto-generated catch block
            ex.printStackTrace();
        }
    }

    public void handleDelete(ActionEvent e) {
        Request request = new DELETERequest() {

            @Override
            protected void handleResponse(Response response) {
                contentField.setText(response.getPayloadString());
            }
        };
        request.setURI(uriField.getText());
        try {
            request.execute();
        } catch (Exception ex) {
            // TODO Auto-generated catch block
            ex.printStackTrace();
        }
    }

    public void populateTree(Resource currentRoot, DefaultMutableTreeNode currentRootNode) {
        Resource[] resources = currentRoot.getSubResources();
        if (resources != null) {
            DefaultMutableTreeNode tempNode;
            for (int i = 0; i < resources.length; i++) {
                currentRootNode.add(new DefaultMutableTreeNode(resources[i].getResourceIdentifier()));
                populateTree(resources[i], (DefaultMutableTreeNode) currentRootNode.getChildAt(i));
                System.err.println(resources[i].getResourceIdentifier());
            }
        }
    }

    public void expandAll () {
        DefaultMutableTreeNode node;
        Enumeration nodes = rootNode.breadthFirstEnumeration();
        while (nodes.hasMoreElements()) {
            node = (DefaultMutableTreeNode) nodes.nextElement();
            TreePath path = new TreePath(node.getPath());
            resourceTree.expandPath(path);
        }
    }

    @Override
    public void valueChanged(TreeSelectionEvent e) {
    }

    public String getHost(String uri) {
        StringTokenizer st = new StringTokenizer(uri, "/");
        st.nextToken();
        return st.nextToken();
    }
}
